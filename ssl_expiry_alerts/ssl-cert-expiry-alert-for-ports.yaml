Parameters:
  EMail:
    Type: String
    Description: Enter the email id .
  SNSTopic:
    Type: String
    Description: Enter the sns topic name.
  LogGroupName:
    Type: String
    Description: Enter the cloudwatch log group name.
  Key:
    Type: String
    Description: Enter the key name of the instances (eg. key:Env).
  Value:
    Type: String
    Description: Enter the value of the key (eg. prd).
  CrontabSchedule:
    Type: String
    Description: Enter the required cron tab value (UTC).
    Default: cron(30 4 ? * * *)
Resources:   
  SnsTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName: !Ref SNSTopic
      TopicName: !Ref SNSTopic
      Subscription:
        - Endpoint: !Ref EMail
          Protocol: email         
  AlertLambdaRole:
    Type: "AWS::IAM::Role"
    Properties: 
      RoleName: AlertLambdaRole
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
        - 
          Effect: "Allow"
          Principal: 
            Service: 
              - "lambda.amazonaws.com"
          Action: 
            - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
  RolePolicies: 
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: "allowsAssumeRole"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Action: "sns:Publish"
            Resource: "*"
          - Effect: "Allow"
            Action: "sts:AssumeRole"
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "logs:PutSubscriptionFilter"
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "iam:PassRole"
            Resource: "*"
      Roles: 
        - !Ref "AlertLambdaRole"
  AlertslambdaFun: 
    Type: AWS::Lambda::Function
    Properties: 
      FunctionName: SSLExpiryAlertLambda
      Code: 
        ZipFile: |
          import gzip
          import json
          import base64
          import boto3,os
              
          sns = boto3.client('sns')
          def send_sns(severity, subject, message):
              SNSTopicArn = os.getenv('SNS_TOPIC_ARN')
              subject = severity + ": " + subject
              sns.publish(TopicArn=SNSTopicArn, Message=message, Subject=subject)
              
          def lambda_handler(event, context):
              cw_data = event['awslogs']['data']
              compressed_payload = base64.b64decode(cw_data)
              uncompressed_payload = gzip.decompress(compressed_payload)
              payload = json.loads(uncompressed_payload)

              log_events = payload['logEvents']
              for log_event in log_events:
                  print(f'LogEvent: {log_event}')
                  send_sns("Critical", "SSL Certificate Expiring Soon", log_event["message"])
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref SnsTopic
      Role: !GetAtt AlertLambdaRole.Arn
      Handler: index.lambda_handler
      Runtime: python3.7
      Timeout: 300
  AlertsLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !Ref AlertslambdaFun
      Principal: logs.amazonaws.com
      SourceArn: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroupName}:*'
  AlertsSubFilter:
    Type: AWS::Logs::SubscriptionFilter
    Properties: 
      DestinationArn: !GetAtt AlertslambdaFun.Arn
      FilterPattern: 'will expire'
      LogGroupName: !Ref LogGroupName
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Ref LogGroupName
  SSLExpiryInstancesAssociation:
    Type: AWS::SSM::Association
    Properties:
      Name: !Ref SSLExpirySSMDocument
      AssociationName: "SSLExpiryInstancesAssociation"
      ScheduleExpression: !Ref CrontabSchedule
      ApplyOnlyAtCronInterval: true
      Targets:
      - Key: !Ref Key
        Values: 
        - !Ref Value
  SSLExpirySSMDocument:
    Type: AWS::SSM::Document
    Properties:
      Name: "SSlExpiryAlertDocument"
      DocumentType: "Command"
      Content:
        schemaVersion: '2.2'
        mainSteps:
        - precondition:
            StringEquals:
            - platformType
            - Linux
          action: aws:runShellScript
          name: runInSpecLinux
          inputs:
            runCommand:
              - "#!/bin/bash"
              - "sudo su -"
              -  website=$(hostname -f)
              -  declare -a ports=("8080" "17002" "17011" "16002" "443" "19002" "19011")
              -  for PORT in "${ports[@]}"
              -  do
              -  if [[ `sudo ss -tunlp | grep ":${PORT}" | wc -l` -gt 0 ]]
              -  then
              -  echo  "Port exists"
              -  else
              -  echo "checking next port"
              -  continue
              -  fi
              -  certificate_file=$(mktemp)
              -  echo -n | openssl s_client -servername "$website" -connect "$website":$PORT 2>/dev/null | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > $certificate_file
              -  date=$(openssl x509 -in $certificate_file -enddate -noout | sed "s/.*=\(.*\)/\1/")
              -  date_s=$(date -d "${date}" +%s)
              -  now_s=$(date -d now +%s)
              -  date_diff=$(( (date_s - now_s) / 86400 ))
              -  if(( $date_diff == 90 )); then echo "The SSLCertificate for $website will expire in $date_diff days" >> /var/log/ssl-expiry.log; break; elif(( $date_diff == 60 )); then echo "The SSLCertificate for $website will expire in $date_diff days" >> /var/log/ssl-expiry.log; elif(( $date_diff == 30 )); then echo "The SSLCertificate for $website will expire in $date_diff days" >> /var/log/ssl-expiry.log; elif(( $date_diff < 14 && $date_diff > 0 )); then echo "The SSLCertificate for $website will expire in $date_diff days" >> /var/log/ssl-expiry.log; fi
              -  rm "$certificate_file"
              -  done 