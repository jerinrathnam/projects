Parameters: 
  StartScheduled: 
    Default: cron(00 4 * * ? *)
    Type: String
  StopScheduled: 
    Default: cron(10 4 * * ? *)
    Type: String

Resources:
  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties: 
      RoleName: Ec2LambdaRole
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
        - 
          Effect: "Allow"
          Principal: 
            Service: 
              - "lambda.amazonaws.com"
          Action: 
            - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
  RolePolicies: 
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: "stopStartEc2Policy"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Action:
              - "ec2:StartInstances"
              - "ec2:StopInstances"
              - "ec2:DescribeInstances"
            Resource: "*"
      Roles:
        - !Ref LambdaRole
  Ec2lambdaFun: 
    Type: AWS::Lambda::Function
    Properties: 
      FunctionName: Ec2LambdaFunction
      Code: 
        ZipFile: |
          import json 
          import boto3 

          ec2 = boto3.client('ec2')
          def lambda_handler(event, context):
              filter = [{
                  'Name':'tag:Product', 
                  'Values': ['marklogic']}]                  
              ec2_inst = ec2.describe_instances(Filters=filter)['Reservations']
              for instance in ec2_inst:
                  for Id in instance['Instances']:
                      instances = [Id['InstanceId']]
                      action = event["action"]                       
                      if action == 'Start':
                        print("Starting Instance:" + str(instances))  
                        ec2.start_instances(InstanceIds=instances)
                        response = "Successfully started instances: " + str(instances)
                        print("Successfully started instances: " + str(instances))                       
                      elif action == 'Stop':
                        print("Stoping Instance:" + str(instances))
                        ec2.stop_instances(InstanceIds=instances)
                        response = "Successfully stopped instances: " + str(instances) 
                        print("Successfully stopped instances: " + str(instances))                    
              return {
                'statusCode': 200,
                'body': json.dumps(response)
              }
      Role: !GetAtt LambdaRole.Arn
      Handler: index.lambda_handler
      Runtime: python3.7
      Timeout: 300
      
  StartLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !Ref Ec2lambdaFun
      Principal: events.amazonaws.com
      SourceArn: !GetAtt StartScheduledRule.Arn
  StopLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !Ref Ec2lambdaFun
      Principal: events.amazonaws.com
      SourceArn: !GetAtt StopScheduledRule.Arn

  StopScheduledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "ScheduledRuleForStartingInstances"
      ScheduleExpression: !Ref StopScheduled
      State: "ENABLED"
      Targets: 
        - 
          Arn: !GetAtt Ec2lambdaFun.Arn
          Id: "TargetFunctionV1"
          Input: "{ \"action\" : \"Stop\" }"
  StartScheduledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "ScheduledRuleForStartingInstances"
      ScheduleExpression: !Ref StartScheduled
      State: "ENABLED"
      Targets: 
        - 
          Arn: !GetAtt Ec2lambdaFun.Arn
          Id: "TargetFunctionV1"
          Input: "{ \"action\" : \"Start\" }"



